/**
 * App component: "Site do zero" (single-file React)
 * - Tailwind CSS utilities used for styling (no import required in this file)
 * - Default export a React component
 *
 * Features included:
 * - Tela inicial / Splash
 * - Tela de Login (usuário/senha) com validação simples
 * - Tela base (dashboard) com um combo (select), botão para acessar itens, lista de itens
 * - Modal de detalhes do item
 * - Estado persistido no localStorage (simula sessão)
 *
 * Como usar:
 * 1) Crie um projeto React (Vite / Create React App) com Tailwind configurado.
 * 2) Cole este arquivo em src/App.jsx e rode a aplicação.
 * 3) Usuário de exemplo: admin | senha: password
 *
 * Observações: Este é um scaffold pronto para você estender (chamadas API, roteamento, autenticação real).
 */

import React, { useEffect, useState } from "react";

export default function App() {
  const [stage, setStage] = useState("splash"); // splash | login | dashboard
  const [loading, setLoading] = useState(false);

  // auth
  const [user, setUser] = useState(() => {
    try {
      return JSON.parse(localStorage.getItem("app_user")) || null;
    } catch (e) {
      return null;
    }
  });

  // login form
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");

  // items and UI state
  const itemsSeed = [
    { id: 1, name: "Item A", category: "alpha", description: "Descrição do Item A" },
    { id: 2, name: "Item B", category: "beta", description: "Descrição do Item B" },
    { id: 3, name: "Item C", category: "alpha", description: "Descrição do Item C" },
  ];

  const [items, setItems] = useState(() => {
    const stored = localStorage.getItem("app_items");
    return stored ? JSON.parse(stored) : itemsSeed;
  });

  const [selectedCategory, setSelectedCategory] = useState("all");
  const [selectedItemId, setSelectedItemId] = useState(null);
  const [showModal, setShowModal] = useState(false);

  useEffect(() => {
    // splash timeout
    const t = setTimeout(() => {
      setStage(user ? "dashboard" : "login");
    }, 900);
    return () => clearTimeout(t);
  }, [user]);

  useEffect(() => {
    localStorage.setItem("app_items", JSON.stringify(items));
  }, [items]);

  function handleLogin(e) {
    e.preventDefault();
    setError("");
    setLoading(true);
    // fake auth delay
    setTimeout(() => {
      setLoading(false);
      if (username === "admin" && password === "password") {
        const u = { username: "admin", name: "Administrador" };
        setUser(u);
        localStorage.setItem("app_user", JSON.stringify(u));
        setStage("dashboard");
      } else {
        setError("Usuário ou senha inválidos. Use admin / password para demo.");
      }
    }, 700);
  }

  function handleLogout() {
    localStorage.removeItem("app_user");
    setUser(null);
    setStage("login");
  }

  function categories() {
    const cats = Array.from(new Set(items.map((i) => i.category)));
    return ["all", ...cats];
  }

  function filteredItems() {
    if (selectedCategory === "all") return items;
    return items.filter((it) => it.category === selectedCategory);
  }

  function openItem(id) {
    setSelectedItemId(id);
    setShowModal(true);
  }

  function addItem() {
    const next = Math.max(0, ...items.map((i) => i.id)) + 1;
    const newItem = { id: next, name: `Novo Item ${next}`, category: "beta", description: "Descrição..." };
    setItems([newItem, ...items]);
  }

  function removeItem(id) {
    setItems(items.filter((it) => it.id !== id));
    setShowModal(false);
  }

  // small components inside the file for simplicity
  function Splash() {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-sky-600 to-indigo-700 text-white">
        <div className="text-center p-6 rounded-2xl bg-white/10 backdrop-blur-md shadow-2xl">
          <h1 className="text-3xl font-bold mb-2">Bem-vindo ao Site do Zero</h1>
          <p className="opacity-90">Montando tela inicial, login e base com combo + itens.</p>
        </div>
      </div>
    );
  }

  function Login() {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="max-w-md w-full p-6 bg-white rounded-2xl shadow">
          <h2 className="text-2xl font-bold mb-4">Entrar</h2>
          <form onSubmit={handleLogin} className="space-y-4">
            <div>
              <label className="block text-sm font-medium">Usuário</label>
              <input
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                className="mt-1 block w-full rounded-md border px-3 py-2"
                placeholder="admin"
              />
            </div>
            <div>
              <label className="block text-sm font-medium">Senha</label>
              <input
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                type="password"
                className="mt-1 block w-full rounded-md border px-3 py-2"
                placeholder="password"
              />
            </div>
            {error && <div className="text-red-600 text-sm">{error}</div>}
            <div className="flex items-center justify-between">
              <button
                type="submit"
                className="px-4 py-2 rounded-lg bg-indigo-600 text-white font-semibold disabled:opacity-60"
                disabled={loading}
              >
                {loading ? "Entrando..." : "Entrar"}
              </button>
              <button
                type="button"
                className="text-sm underline"
                onClick={() => {
                  setUsername("admin");
                  setPassword("password");
                }}
              >
                Preencher demo
              </button>
            </div>
          </form>
        </div>
      </div>
    );
  }

  function Dashboard() {
    const selectedItem = items.find((i) => i.id === selectedItemId);

    return (
      <div className="min-h-screen bg-gray-100">
        <header className="flex items-center justify-between p-4 bg-white shadow">
          <div className="flex items-center gap-4">
            <div className="text-xl font-bold">Meu App</div>
            <div className="text-sm text-gray-500">Olá, {user?.name ?? user?.username}</div>
          </div>
          <div className="flex items-center gap-3">
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="rounded-md border px-3 py-2"
            >
              {categories().map((c) => (
                <option value={c} key={c}>
                  {c === "all" ? "Todas categorias" : c}
                </option>
              ))}
            </select>
            <button className="px-3 py-2 rounded-md border" onClick={addItem}>
              + Novo Item
            </button>
            <button className="px-3 py-2 rounded-md bg-red-500 text-white" onClick={handleLogout}>
              Sair
            </button>
          </div>
        </header>

        <main className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <aside className="md:col-span-1 bg-white p-4 rounded-lg shadow">
              <h3 className="font-semibold mb-2">Navegação</h3>
              <ul className="space-y-2 text-sm text-gray-700">
                <li>
                  <button className="w-full text-left" onClick={() => setSelectedCategory("all")}>Visão Geral</button>
                </li>
                <li>
                  <button className="w-full text-left" onClick={() => setSelectedCategory("alpha")}>Categoria alpha</button>
                </li>
                <li>
                  <button className="w-full text-left" onClick={() => setSelectedCategory("beta")}>Categoria beta</button>
                </li>
              </ul>
            </aside>

            <section className="md:col-span-2">
              <div className="bg-white p-4 rounded-lg shadow">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="font-semibold">Itens</h3>
                  <div className="text-sm text-gray-500">{filteredItems().length} encontrados</div>
                </div>

                <div className="space-y-3">
                  {filteredItems().map((it) => (
                    <div key={it.id} className="flex items-center justify-between p-3 border rounded-md">
                      <div>
                        <div className="font-medium">{it.name}</div>
                        <div className="text-xs text-gray-500">{it.category}</div>
                      </div>
                      <div className="flex items-center gap-2">
                        <button className="px-3 py-1 rounded-md border" onClick={() => openItem(it.id)}>Abrir</button>
                        <button
                          className="px-3 py-1 rounded-md bg-red-50 text-red-700 border"
                          onClick={() => removeItem(it.id)}
                        >
                          Remover
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div className="mt-4 text-sm text-gray-600">Dica: clique em um item para ver detalhes (modal).</div>
            </section>
          </div>
        </main>

        {/* modal */}
        {showModal && selectedItem && (
          <div className="fixed inset-0 z-50 flex items-center justify-center">
            <div className="absolute inset-0 bg-black/40" onClick={() => setShowModal(false)} />
            <div className="relative bg-white rounded-lg p-6 max-w-lg w-full shadow-lg">
              <h4 className="text-xl font-semibold mb-2">{selectedItem.name}</h4>
              <div className="text-sm text-gray-600 mb-4">Categoria: {selectedItem.category}</div>
              <p className="mb-4">{selectedItem.description}</p>
              <div className="flex justify-end gap-3">
                <button className="px-4 py-2 rounded-md" onClick={() => setShowModal(false)}>Fechar</button>
                <button
                  className="px-4 py-2 rounded-md bg-red-600 text-white"
                  onClick={() => removeItem(selectedItem.id)}
                >
                  Remover item
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  }

  return (
    <div className="app-root">
      {stage === "splash" && <Splash />}
      {stage === "login" && <Login />}
      {stage === "dashboard" && <Dashboard />}
    </div>
  );
}
